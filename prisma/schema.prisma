generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
}

model User {
  id             String   @id @default(uuid())
  googleId        String?   @unique
  name           String?
  email          String   @unique
  password       String
  profileImage    String?
  isVerified     Boolean @default(false)
  verificationToken String?
  verifyTokenExpiry DateTime?
  resetToken     String?
  resetTokenExpiry DateTime?
  twoFactorSecret  String? // Field to store @FA secret
  towFactorEnabled Boolean @default(false) // Field to indicate if 2FA is enabled
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  aiResponses      AIResponse[] // Relation to AIResponse model
  webResponses     WebResponse[] // Relation to WebResponse model
  template         Template[] // Relation to Templates model
  component        Component[] // Relation to Component model
}

model AIResponse {
  id         String   @id @default(uuid())
  userId     String   // Foreign key to User
  user       User     @relation(fields: [userId], references: [id])
  query      String   // User's search query
  response   String   // AI's generated response
  createdAt  DateTime @default(now())
}

model WebResponse {
  id         String   @id @default(uuid())
  userId     String   // Foreign key to User
  user       User     @relation(fields: [userId], references: [id])
  chatHeader String
  query      String   // User's search query
  response   String   // AI's generated response
  createdAt  DateTime @default(now())
}

model Template {
  id          String   @id @default(uuid())
  userId     String   // Foreign key to User
  user       User     @relation(fields: [userId], references: [id])
  name        String
  description String
  techStack   String[]
  screenshots String[]
  documentUrl String
  codeUrl     String
  apiList     String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Component {
  id          String   @id @default(uuid())
  userId     String?   // Foreign key to User
  user       User?     @relation(fields: [userId], references: [id])
  name      String
  description String
  code        String
  implementationSteps String
  apiRequired String
  documentation String
  imageUrl  String
  //categories String?
  createdAt DateTime @default(now())
  updatedAt   DateTime @updatedAt
}